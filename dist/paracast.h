/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/openfluke/paracast/cabi */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "cabi.go"

#include <stdint.h>

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


// Create a new network (float32) and return a handle.
// layers: int32 array of length 2*L: [w0,h0,w1,h1,...]
// activations: array of char* (L items), e.g. {"linear","relu","softmax"}
// fullyConnected: bytes (0/1) (L items) â€“ input entry is ignored; starting from layer1.
//
extern __declspec(dllexport) long long int Paracast_NewNetwork(void* layersPtr, int layersCount, char** actsPtr, int actsCount, unsigned char* fullPtr, int fullCount, int enableWebGPU);

// Destroy and free a network.
//
extern __declspec(dllexport) void Paracast_Free(long long int h);

// Load a model from JSON string; returns handle.
//
extern __declspec(dllexport) long long int Paracast_LoadFromJSON(char* jsonStr, int enableWebGPU);

// Save a model to JSON file path.
//
extern __declspec(dllexport) int Paracast_SaveJSON(long long int h, char* path);

// Forward pass on a single sample.
// `input` is row-major float32 of size (inH*inW).
//
extern __declspec(dllexport) int Paracast_Forward(long long int h, float* input, int inW, int inH);

// Read the output vector (flattened) into `out` (float32).
//
extern __declspec(dllexport) int Paracast_GetOutput(long long int h, float* out, int outMax);

// Train for N epochs on (inputs, targets).
// Inputs/targets are packed batches of samples back-to-back (row-major each).
// dims: inW,inH,outW,outH. batch is the number of samples provided.
// lr is learning rate. If clipUpper<clipLower you get no clipping.
//
extern __declspec(dllexport) int Paracast_Train(long long int h, float* inputs, int inW, int inH, float* targets, int outW, int outH, int batch, int epochs, float lr, int useGPU, float clipUpper, float clipLower);

#ifdef __cplusplus
}
#endif
